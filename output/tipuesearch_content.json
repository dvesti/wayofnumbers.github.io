{"pages":[{"title":"About","text":"Data science blog for the rest of us. Michael Li Designer, Developer. Xiao Xu Deep thinker.","tags":"about","url":"pages/about.html"},{"title":"How to Deploy Your Machine Learning Web App to Digital Ocean","text":"Using Fast.ai, Docker, GitHub, and Starlette ASGI Framework You've collected your data, cleaned it up diligently, squeezed it into your carefully fine-tuned model and sweated many GPU hours and trained the model. The prediction is State-Of-The-Art! Bravo! But what now? Share it with the world of course! It has such great potential and no one has done this before, you want everyone to try it out! How? You ask. In this tutorial, I'll introduce you to an affordable and flexible way of deploying your trained Machine Learning model. I'll walk you through every step in the way and hopefully, after reading this article, you'll have no issue deploying your ‘next big thing(model)' to the world. How to Train(and export) Your Dragon(Model) Image from https://www.facebook.com/HowToTrainYourDragon/ First of all, you need to train your model and export it. In this article, we'll use Fast.ai's library to showcase how it's done. You may want to refer to my two-part articles about how to collect data and train a Chinese Calligraphy Classifier model or you can also use your own model. For the purpose of this article, I'll assume that you already trained the model and achieved your desired accuracy rate. Fast.ai uses a learn object to train the model, to export your model, use methodlearn.export() to export and save your trained model to a export.pkl file( my model export file from the link above is around 100MB ). Save this file, we'll use that later. ‘GitHub-Driven' Web Development With the model ready, the next step is web app development. I assume you are a full-stack web developer, so let's jump right into coding. No, I'm just kidding here. We'll use a boilerplate web app template on GitHub to quickly get your web app ready. You only need to do some minor tweaks and you'll be ready to go. If you don't know what GitHub is, it is a place to hold the source code of a lot of open-source applications. I already put a ready-made web app's code there so you can easily download and reuse. Go to this GitHub repository , click the big green button ‘ Clone or download ' on the right side, like below: On the pop-down window, copy the link, then go to your terminal and type: git clone [ https : // github . com / wayofnumbers / fastai - vision - uvicorn - gunicorn - starlette - docker . git ]( https : // github . com / wayofnumbers / fastai - vision - uvicorn - gunicorn - starlette - docker . git ) cd fastai - vision - uvicorn - gunicorn - starlette - docker These commands will clone all the required code onto your local machine, under a folder named fastai-vision-uvicorn-gunicorn-starlette-docker and enter that folder. This is the main folder we'll be working on, there are a couple of things in it that worth explaining: app : The structure of this appfolder is as below: template | --app.html main . py export . pkl This is where your Starlette web app source code resides. It has a very simple Python file main.py. The **Starlette **is a lightweight ASGI framework/toolkit, which is ideal for building high-performance asyncio services. It also has the saved model fileexport.pkl. The template folder holds an HTML template file app.html which will serve as your web app UI . Remember the exported export.pkl file you saved? Pull that out and replace the one in this app folder. So the app will use your model. You are also welcomed to update the app.html file for better-looking UI , but it's not necessary as far as deployment is concerned. Now the source code of your web app is ready, we need to wrap it into a Docker container and do some testing. We use the Dockerfile as the config file. We'll explore more in the next section. Let's Dockerize it! We will use Docker to create a container where our web app runs. If you don't know what Docker is, just know that it is kind of a mini virtual machine, with all the necessary libraries and dependencies installed so the app can run smoothly. It is smaller and more flexible than real Virtual Machine and can be created and deployed very easily. First, you need to install Docker. Here is a very thorough guide for your reference. After installation, if you are running Ubuntu, then it's beneficial to run the following commands: sudo groupadd docker sudo usermod - aG docker $ USER This will eliminate the need to use sudoevery time you enter a docker command. Reboot, now docker should be properly installed. In the same directory where app folder and Dockerfile resides, we need to create a docker image that contains all source code within this folder so we can test things out. Enter the following command(don't forget the ‘.' at the end): docker build - t test_app . This will start a docker image building process according to the Dockerfile. It will take a while, so let's take a brief look at what's inside the Dockerfile: # 1 FROM tiangolo / uvicorn - gunicorn - starlette : python3 . 7 # 2 RUN pip install fastai aiohttp # 3 RUN pip install jinja2 # 4 RUN pip install starlette # 5 COPY . / app / app # 6 WORKDIR / app # 7 EXPOSE 80 It is quite self-explanatory: Line 1: Specify from which starter image we'll build our docker image. We use tiangolo/uvicorn-gunicorn-starlette:python3.7 . You can find its GitHub link here and Docker Hub link here . Line 2,3,4: Install fast.ai library, jinja template framework, Starlette framework, and other utilities. Line 5: Copy your app folder into docker image so our app can run within the docker container. Line 6, 7: Assign work directory to the app folder and expose port 80 to outside so we can visit the web app through port 80( HTTP ). Once the docker image is created, run docker images to check. You'll find something like: REPOSITORY TAG IMAGE ID CREATED SIZE test_app latest xxxxxxxxx 1 minutes ago 4 . 05 GB Now we can fire up a docker container from the created image and test your app locally: docker run - p 80 : 80 \\ - v . / absolute / path / to / export . pkl : / app / export . pkl \\ - e TITLE = \"Chinese Calligraphy Classifier\" \\ - e SUBTITLE = \"Can disambiguate Chinese calligraphy styles like KaiShu, LiShu, XiaoZhuan\" test_app On the above docker command, we specified the port to be 80. We transferred two environment variables into the container, TITLE and SUBTITLE , they will be used to display our web app UI titles. At the end we specified our docker image name: test_app. Please note that for export.pkl file, you need to use the absolute path, otherwise Docker will not be able to find it. If you don't see any error, your docker container should now be up and running. Head over to your browser and type 127.0.0.1 and hit enter, voilà ! You should see the web app. Give it a ‘Kaishu', ‘Lishu' or ‘Xiaozhuan' calligraphy image and hit ‘ Classify ', you should see something like this: Very rough web app UI You can see the app classified this as ‘KaiShu', which is correct. Now that your app is up and running on the local machine, we are 80% done. What's left is to deploy it on the cloud. Let's head to the cloud next! Next Step, Cloud! For the cloud hosting service, we'll use DigitalOcean . Comparing to the more incumbent players like Amazon AWS , GCP , or Azure, it's more friendly to developers and cheaper. You can follow this well written and concise tutorial to create an account and a ‘Droplet' of your own. (‘Droplet' is a virtual machine running by Digital Ocean where you can install your app in, much like an AWS instance.) If you want, you can use this link to create your account and get $50 credit for free, which will be enough to get you started. Use the following configuration as a reference: It is recommended that you create your Droplets with at least 4G memory since installing PyTorch will require a lot of memory. You can resize it down to 2G later. You can choose the default ‘Data Center' and set up your authentication method. Use SSH key or password, whichever way you feel more comfortable. I personally prefer SSH key, fewer keypresses and more secure. Once the Droplet is created, SSH into it and we are ready for the final deployment! Deploy! Deploy! Deploy！ Now you should be able to SSH into your server as root. It's recommended to create a normal user with sudo privilege, you can follow this tutorial . Once a normal user is created, log out of your root user and SSH back into the server with your normal user account. The final deployment is very similar to what we've already done on our local machine, only this time we do it on the remote droplet server. First, let's git clone our repo so we have the source code: git clone [ https : // github . com / wayofnumbers / fastai - vision - uvicorn - gunicorn - starlette - docker . git ]( https : // github . com / wayofnumbers / fastai - vision - uvicorn - gunicorn - starlette - docker . git ) cd fastai - vision - uvicorn - gunicorn - starlette - docker Don't forget to copy your export.pkl file to replace what's in the app folder. (follow this link if you don't know how) If docker is not installed, install docker. Then build the docker image using below command. Again, if the image building failed due to low memory, resize your memory up, you can resize it down later without much cost increase. docker build - t test_app . Once the image is built, fire up the docker container: docker run - p 80 : 80 \\ - v . / absolute / path / to / export . pkl : / app / export . pkl \\ - e TITLE = \"Chinese Calligraphy Classifier\" \\ - e SUBTITLE = \"Can disambiguate Chinese calligraphy styles like KaiShu, LiShu, XiaoZhuan\" test_app Once the docker container is up and running, head over to your browser and enter your Droplet's IP address, hit Enter. Congratulations! You've successfully deployed your Deep Learning model to the Internet! Conclusion Not that hard, huh? Deployment using standard DigitalOcean Droplet offers a lot of flexibilities. You can do whatever you want to your Droplets since you have root access. You can run multiple apps on it, and pay very little($5 - $10 tier should be enough). If your app gets some traction and needs more resources, you can easily scale up. I hope this tutorial somewhat help you deploy your AI app. If you have any question or want to share your deployment experience, please write a response below. Happy Deploying!","tags":"Machine Learning","url":"how-to-deploy-ML-web-app-to-DO.html"},{"title":"OpenAI: Catch Me If You Can","text":"What OpenAI's Multi-Agent Hide and Seek Break Through Means Who is OpenAI? When it comes to reinforcement learning, OpenAI is a big name. The OpenAI Gym toolkit provides a solid foundation for a lot of ML researchers to explore and study reinforcement learning techniques. They also are known to have developed ‘ GPT -2 ' language model. The ‘deep fake' news the model generated is so scarily good that OpenAI refused to release the trained model, just the code and paper . From OpenAI.com Hide and Seek, Only This Time the Computer is Playing It Today they release something new and equally groundbreaking: The Multi-agent Hide and Seek . You can have a look at the short video below from their website: Simply put, they designed a reinforcement agent and let it play a simple ‘Hide and Seek' game that we all played when we were still a kid. After millions of games played with itself and the prior version of itself. Both the seeking and hiding agent developed several very effective strategies to counter each other and win. Basic abilities agent has to play and win the game How to Train Your Dragon, urr… Agent The agents develop their tactics in an adversarial way. Both agents move randomly Seeking agent learns to chase hiding agent. Hiding agent learns to run away from seeking agent (not working) Hiding agent learns to use blocks in the environment to block entrance to a small room and hide inside (It works!) Seeking agent learns to use ramp blocks in the environment to jump over the wall to get inside the blocked room Hiding agent learns to move ramp blocks inside the room, then block the room …… the game keeps playing and more gaming mechanism is discovered and exploited, both agents getting smarter and smarter. The seeking agent and hiding agent counter each other and at the same time grow with each other. This is a concept (相生相克 mutually reinforce and neutralize each other) very familiar to Chinese people, and can be illustrated in a simple way: Taichi 太极 Philosophy aside, we did see this kind of concept appear on recent AI field quite often. Another example is the rise of GAN (General Adversarial Network) where a ‘generator' and ‘discriminator' are trained at the same time to achieve state-of-the-art results. The Agents Looks Cute! But Why I Still Feels a Bit Chilly on My Spine? Agents in the game are quite cute with cartoony big heads and smiley eyes. But underneath the cuteness, what does the great results suggest? Well, just imagine, if they are not playing this cute little hide and seek game where agents giggles when get caught, rather, they are playing Doom or Quake, where blood and gores fly around when the agent gets caught. Will the bloody scene lead you to start worrying about the possible application of this model and the potential it has if weaponized? If this still seems too far away from reality, let me bring this uncomfortable imagination one step further, allow me to use three words: Boston Dynamic, Drones, Skynet. The tasks and tactics agent learned from millions of games might still seem easy. Hide, use blocks, use ramps, etc. But don't forget that complicated and sophisticated strategy is formed with all these small pieces. One big advancement of AI recently is transfer learning , build new AI models on top of already trained/learned models. (Using transfer learning based on already trained IMAGENET model, people can quickly train a fine-grained cat/dog classifier with only 100 images and 1 GPU in minutes. I explained the approach of fast.ai at here ). These basic game tactic model can be utilized in the future to build more realistic and dangerous military strategy models that can totally be applied in war. This is not beyond our reach now. If we put all our current AI and robotic achievements together, great/scary things can be achieved. When an OpenAI model agent running within a Boston Dynamics robot or killer drones, and video surveillance networks everywhere to watch your every step, if you are the hider playing this game, what is the chance of you winning?","tags":"Machine Learning","url":"openai-catch-me-if-you-can.html"},{"title":"How I Trained Computer to Learn Calligraphy Styles: Part 2","text":"Build a Deep Learning Model with fast.ai Library Photo by Kon Karampelas on Unsplash I wanted to start a series of posts for the projects I finished/polished for my Practical Deep Learning for Coders fast.ai course. Since I'm pretty green on ML / DL field, I hope the challenges I faced and overcome could be of value for other people experiencing the same journey. Model 1 ・ 1a Making It Even Better In my last post , I explained the approach I take for this image recognition problem using fast.ai library. As you can see, once we get the data down to a fast.ai ImageDataBunch, the code is rather simple and we achieve a 90% accuracy rate, which is quite impressive considering the quality of our data(randomly downloaded from Google/Baidu search without much data cleaning). Now, can we do better? DDI Editor's Pick: 5 Machine Learning Books That Turn You from Novice to Expert | Data Driven… The booming growth in the Machine Learning industry has brought renewed interest in people about Artificial… www.datadriveninvestor.com Turns out, we can! How? Well, there are two things in our prior pipeline that could improve: Image Pre-processing Tweak Model Training Fine Tune. Let's dive deeper. Image Pre-Processing Tweak Remember when we import our data into fast.ai ImageDataBunch, we used the following code: Notice that on our image pre-processing, i.e. get_transforms function, we didn't give it any parameter and just used the default. The default will try to apply a variety of image augmentation techniques to make the image data-set generalize better, like flipping, warping, rotating, cropping, etc. This is good, fast.ai library helped us do the ‘best practice' for the majority of the cases. But in our case here, some default might not work that well. The biggest one is ‘flipping'. Because we are trying to classify calligraphy artworks and in real life, it will never randomly flip left/right or up/down. So making the images flips randomly will not reflect the real-life cases and thus won't help with our training accuracy. To fix this, we tweaked our code as below: Notice we pass do_flip=False into the get_transforms function, thus telling the module to not randomly flipping our images during importing. Model Training Fine Tune Now that the image pre-processing is done. We can re-structure out model training to avoid overfitting and achieve better accuracy. This approach is introduced in the fast.ai Practical Deep Learning for Coders course lesson 3 . Instead of training the model directly from a 256x256 image size, we'll gradually scaling up the image size. More concretely, we will first train a CNN to classify the images of 128x128 size, once we achieved best accuracy, we'll then use transfer learning and keep training the model on the same data-set, except with 256x256 image size. We'll call the 128x128 image size training ‘stage 1' and 256x256 image size training ‘stage 2' After our stage 1 training(where my last post left off), we have a trained CNN model called learn , it's ‘unfreezed' and achieves an accuracy of around 85%. Accuracy 86% after training a 128x128 image size CNN . Now we need to freeze the network again, create a new ImageDataBunch with 256x256 image size and restart the same training process. After finding the best learning rate, we train the CNN with another 2 epochs, already breaking into 91% accuracy. We'll then do the same ‘unfreeze' and keep training. After unfreeze, we trained the model with another 4 epochs, the accuracy broke into 96.5% . Observed that valudation_losshas already surpassed training_loss, suggesting a sign of overfitting. We'll stop our training here. This simple technique is also called ‘ Progressive resizing ' by Jeremy Howard from fast.ai and helped his team beat Google in a competition of speed training IMAGENET in *DAWNBench by training the IMAGGNET in a whopping 18 minutes and \\$40 Amazon AWS cost.* To Wrap It Up Photo by Franki Chamaki on Unsplash With two simple tweaks, we managed to increase the accuracy around 6.5%, breaking into the state-of-the-art range of results. Major takeaways: When doing image pre-processing, make sure the processed images still properly represent what real-life data will look like. The reason gradually increase training image size works is: by giving the trained model a data-set that's 4 times bigger, actually means giving the model a brand new data to train, avoiding overfitting. Starting from smaller sized images for training will also have the benefit of faster training and quicker experimenting. This usually leads to better results. That's it for Chinese Calligraphy Classifier. I hope you learned a thing or two after reading these two articles. We're trying to get some specific calligrapher's ‘true' and ‘fake' artworks and see if we can build a ‘true or false' classifier. This will be a very interesting and much valuable next step. Will report back and write more articles if we made real progress. But until then, we'll move on to put this well-trained model into production and build a web-app around it. Stay tuned. If you haven't read my first post on this topic, here's the link: How I Trained Computer to Learn Calligraphy Styles: Part1 Build a Deep Learning Model with fast.ai Library medium.com","tags":"Machine Learning","url":"chinese-calligraphy-classifier-2.html"},{"title":"How I Trained Computer to Learn Calligraphy Styles: Part 1","text":"Build a Deep Learning Model with fast.ai Library Photo by Raychan on Unsplash I wanted to start a series of posts for the projects I finished/polished for my Practical Deep Learning for Coders fast.ai course. Since I'm pretty green on ML / DL field, I hope the challenges I faced and overcome could be of value for other people experiencing the same journey. Model 1 ・ 1a Why Build a Chinese Calligraphy Classifier Like any calligraphy, Chinese calligraphy is a form of art. Some great pieces written by some ancient masters have both great art value and economic values (selling at multi-million dollars on auctions). * Jieshi Tie by Song Dynasty politician and scholar Zeng Gong, \\$30,000,000* There are multiple main styles/schools of calligraphy, mainly belongs to different dynasties. Each has its own way of shaping the character and arranging them. The differences are subtle and abstract. It makes sense to see if a trained deep learning model can do a good job of telling which style it is. DDI Editor's Pick: 5 Machine Learning Books That Turn You from Novice to Expert | Data Driven… The booming growth in the Machine Learning industry has brought renewed interest in people about Artificial… www.datadriveninvestor.com I picked three styles: Lishu(隶书) Kaishu(楷书) Xiaozhuan(小篆) as a proof-of-concept. Once successful trained, the model could serve as a transfer learning base-model for the more fine-grained classifier( e.g. calligraphers classifier). This has some real-life value. From time to time, some ancient artifacts are discovered and some of them are calligraphy artworks. Sometimes it's hard to tell whose work it is. Is it valuable (like undiscovered artwork by a famous calligrapher)? This calligrapher classifier can serve as a way to quickly identify artworks by great calligraphers. ( Finding diamond in the rough 😉 ) Collecting Data To build a calligraphy classifier, we will need some calligraphy examples of each style. I did some search online and cannot find any good already-made data-set for different calligraphy styles. So I'll have to build it myself. Building a images data-set isn't hard thanks to Google's Images search functionality and some JavaScript snippets. Here's how: Go to Google Images and search for \"隶书 字帖 网格\" (lishu, characters book, grid), this will give you the most relevant results. Scroll down to show more results, you'll hit the bottom with ‘ Show more results ' button. Click if you want more, but keep in mind that 700 images is the maximum here. Google search results for Lishu style Now is where the magic happens. Press Ctrl+Shift+J in Windows/Linux and Cmd+Opt+J in Mac to bring up the JavaScript ‘Console' window of the browser. The following JavaScript snippet will get the URLs of each of the images. 4) If successfully run, a text file will be downloaded with all the URLs for the images in your search results. You can then set up a folder and use fast.ai's ‘download_images' function to download these images. Rinse and repeat for other styles. You might want to put them into different folders like kaishu, xiaozhuan and put them all under a folder called train so later on, fast.ai can easily import them into the model. Alternatively, you can also go to Baidu.com for images search, using this snippet to automatically download the images you searched for. (Code too long to be put into this post, so I link it here). Let's Have a Look at the Data If you organize the downloaded images into train/lishu, train/kaishu, train/xiaozhuan, then you can run the following code to import them into and transformed accordingly, ready to fit a model.fast.ai's powerfulImageDataBunch object, where all data is organized, splitted and transformed accordingly, ready to fit a model. Note that we split the train/validation set with an 80/20 ratio, image resized to 224 which is a good default for any image recognition task. Now that data is imported properly, let's look at our images: As we can see from the few examples above, the data-set is rather ‘dirty'. The images are not properly cropped, with some side notes with different calligraphy style and some images only have one or two characters. But it's OK . Let's quickly train the model and see how it performs so we can gain some insights into our data. Quick and Dirty Training Let's first create a model. We'll be using transfer learning and use ResNet50 as our model. Pre-trained weights will be downloaded. With 3 epoches of fit_one_cycle, we managed to reach a 90% accuracy rate on our validation set. Not bad! Unfreeze and Fine-Tune Our Training Since the fit_one_cycle function will freeze the initial layers and only training the last couple of layers to speed up the training speed(this approach works because usually for transfer learning, initial layers will capture basic features of the images that are not likely to change a lot), we can hopefully further improve our accuracy by unfreezing all the layers and train again. We used the above lr_find function to find a good learning rate range. The key is to find the steepest slope (as indicated in the orange circle above) in the learning curve and slice it for further training. For example, in the above figure, the bottom of the curve is at 1e-03, then we can pick one point at 1/10 of that, which is 1e-04, and the other one at 1e-06 or 1e-05 (This is inspired from an experimental concept of ‘Super-convergence', described in details in fast.ai course . Sometime you need to do a bit of experiment to find the best learning rate combination but then again, fast.ai is always preaching iterative and interactive approach.) The idea is still to train the first couple of layers slower and last couple layers faster. Let's train another two epoch: Slightly better and the validation_loss starts to surpass train_loss, a sign of overfitting. Let's stop here and wrap things up. Results Interpretation We reached 90% accuracy. Not state-of-the-art but already pretty impressive considering we only have a roughly 700 images per class data-set. More data will definitely lead to better results. Let's look at our results and see if we can find some insights. Using the ClassificationIntepretation object from fast.ai, we can easily calculate the top_losses and see what they are: Look at the confusion matrix, the model does really well in recognize ‘xiaozhuan', probably due to its unique stroke arrangements. A couple of insights: We still have totally wrong images like the grid one (2nd one on 1st row) If there are too few (1st row, 1st column) or too many (2nd row, 2nd column) characters, the model will struggle. Some image shows ‘in-between' kind of styles which the model also had a hard time classify. Which is totally normal, since even human will have a hard time telling which style it belongs to. Final Thoughts This experimental project actually works exceedingly well with fast.ai library. Jeremy Howard said on the course and I quote here (not exactly word by word, but I hope I captured the gist of it. 🙏): fast.ai is a very opinionated library. Wherever we know a best default, we'll choose it for you. Whatever best practice we know works well, we'll do it for you. This is at least proven in this project. With only very few lines of code and very minimum efforts for data collection, we managed a 90% accurate model. I believe with more and better quality data. The state-of-the-art results could be achieved and our calligrapher classifier vision is not beyond reach. fast.ai's tagline: Making neural nets uncool again. Finally, allow me to paraphrase above tagline with a Chinese poet: \"Where once the swallows knew the mansions of the great, They now to humbler homes would fly to nest and mate.\" You could find out how I fine-tuned the model and achieved better accuracy at the link below: How I Trained Computer to Learn Calligraphy Styles: Part 2 Build a Deep Learning Models with fast.ai Library medium.com","tags":"Machine Learning","url":"chinese-calligraphy-classifier-1.html"},{"title":"I finished Andrew Ng's Machine Learning Course and I Felt Great!","text":"The good, the bad, and the beautiful Just finished Andrew Ng 's Machine Learning course on Coursera , and it's GREAT ! Here some thoughts and observations: What's great about it Well designed learning curve EVE Online game's (in)famous crazy learning curve This is especially important for people that never heard of Machine Learning. Not assuming the student have any prior knowledge and gradually guide them through complex concept makes the learning experience challenging yet still fun. Avoid complex math, yet find a way to still enable student to do ML (meme) The Andrew Ng ‘Silent Protector' Meme Maybe the biggest fear for people want to get into Machine Learning and AI is ‘I'm not a math person'. Being able to not getting into too much math yet still explain clearly the concept is invaluable, especially for totally green guys. *Octave / Matlab is more ‘math' like, less digression on programming language itself* Some people might not agree with me on this. Yes Octave/Matlab doesn't have all the fancy libraries like scikit-learn and Pandas, yet it's very expressive when it comes to represent math equations. Transfer equations from class to Matlab code is easier than Python IMHO . Cover most popular models, good foundation Linear/Logistic Regression SVM Neural Network Collaborative Filtering Anomaly Detection K-Means PCA With all these algorithms/models under your belt, you are ready to solve a lot of problems with Machine Learning. Provide practical ML projects knowledge, not only algorithm and programming Besides theory, the course also offers very practical Machine Learning project knowledge, hot to build a pipeline, how to structure the problem solving, etc. Well designed quizzes and assignments, as part of learning too I was always amazed by how well the quizzes and assignments are designed. They are challenging, yet with some efforts achievable, and at the same time offer some new perspective on the lesson. I always learned a few new things doing those and totally enjoyed them. What's lacking? A bit dated on libraries and architectures You won't find the high-level Keras , TensorFlow or PyTorth here, but this course is about foundation of Machine Learning and it delivered on its promise. 2. Could use more examples/applications of ML for motivation There are a lot of exciting development and applications on ML / AI field. If students could be exposed to more of those, it will give them more reasons to keep learning. Final Thoughts ‘Don't worry about it if you don't understand' ™️ Overall great course if you are totally new to Machine Learning. All of the well thought out contents coupled with Andrew Ng 's gentle and calm explanation makes the learning experience a breeze and a pleasant journey. The road ahead for Machine Learning might not be so smooth after all but having a ‘soothing' start could carry you a long way. 👍","tags":"Machine Learning","url":"andrewng-ml-course-review.html"},{"title":"Types of Optimization Algorithms used in Neural Networks and Ways to Optimize Gradient Descent","text":"Original Story Anish Singh Walia : If your input data is sparse then methods such as SGD , NAG and momentum are inferior and perform poorly. For sparse data sets one should use one of the adaptive learning-rate methods. An additional benefit is that we won't need to adjust the learning rate but likely achieve the best results with the default value. If one wants fast convergence and train a deep Neural Network Model or a highly complex Neural Network then Adam or any other Adaptive learning rate techniques should be used because they outperforms every other optimization algorithms. One thing about Machine Learning the overal depth of the topics and algorithms makes it so easy to totally ‘sink' yourself into it. And there is always something to dig. This article provides a view from a higher ground and compare different optimization algorithms and their application areas, thus pulling you out of the deep hole of deep learning. A more visual example of these algorithms, see these two beautifully crafted animations: SGD optimization on loss surface contours SGD optimization on saddle point","tags":"Machine Learning","url":"Typtes-of-optimization-algorithms.html"},{"title":"Tweaking Pelican Elegant Theme","text":"Pelican has a lot of themes, developed by the community and shared on its official GitHub repo here . Pelican Themes also offer some previews of them so you can have a good idea of what to expect. Some themes are really easy to setup and configure, others need some efforts. The Elegant them is the latter. For most of the themes, to make it work, you just need to add define the ‘ THEME ' variable, like so: 'THEME' = 'theme/themename' For Elegant, it's way more than that, and it's a good thing. Elegant packed a lot of great features and thorough considerations to the reader. And that's why I choose it as the theme for my site. Good things come with a price they say. So let's find out. Search Search is useful when you have a lot of articles. All serious blog need to have it. To use it, add ‘tipue_search' and ‘sitemap' to your plugins and it will automatically be enabled. About Me and My Project Elegant's home page layout put the blogger himself front and center with ‘About Me' and the ‘My Project' at the top, followed with ‘Recent Posts'. To use them, you need to set the ‘LANDING_PAGE_ABOUT' and ‘ PROJECTS ' variables in the pelicanconf.py . jQuery Issue I've enabled all the nice features, like search, collasible comments, collasible comments. But they all won't work on Chrome because it's considered ‘unsafe scripts'. After some digging, it turns out the site is using HTTPS , while the original theme's template uses HTTP to load the jQuery that did all these nice features. Once I replaced the HTTP with its HTTPS counterpart, everything works like a charm. Table of Contents Took me some time to get table of contents to work. Firstly ‘extract_toc' plugin needs to be added into the ‘ PLUGINS ' variable. Then ‘markdown' Python module needs to be installed and configured for it to work as the Elegant website instructions. But after all this, it still didn't work. Turns out, you need to add [TOC] in the Markdown file, after all the meta data, to actually add the table of contents into your post. After I did that, everything works. Conclusion Install and tweaking a Pelican theme isn't that hard. Look into the static folder for CSS , tweak them if you want, or add custom CSS of your own and load them in the template. Then go into the template folder to check the html files. With basic HTML / CSS /Javascripts knowledge, you already can achieve a lot on tweaking any theme of your liking.","tags":"Tools","url":"Tweak-Pelican-Elegant-Theme.html"},{"title":"The AI Shortage","text":"Original Story Nikolai Yakovenko from NVIDIA : But when I look for a designer, a Java developer, a real estate agent, etc — some are way better than others and deserve to get paid more than an AI researcher — but you're fundamentally talking about pulling from a large well-balanced pool. It's mostly an information game, and a matter of getting a little better than you need, but not much more than you can afford or should be paying. In AI , it's different. There just aren't enough people to go around. And there aren't enough people for every good project that can be attempted. Either academic, or something that if it works, can save the company $1M. The booming of a new disruptive technology always did this to the industry as well as the talent pool. It drives money into investing on the next big thing, and the money lures more talents into the field. There will be a shortage in the very beginning, and there will always be a surplus at the end of the curve. I'm afraid AI won't be any different. It's just that the curve will take 10 maybe more years to unfold so it's not too late to get in the game if you think you have the stuff, since at the end of day, people with talent and grit will win, in every new technology ‘gold rush'.","tags":"Machine Learning","url":"The-AI-Shortage.html"},{"title":"Setup Data Science Blog with Pelican + GitHub Pages","text":"First of all, this is by no means a thorough tutorial. I've followed Dataquest's blog post: Building a data science portfolio: Making a data science blog to get this one setup. Here are some insights and hiccups that may be helpful to others who want to do the same thing. Static sites and static sites generator If you have never experienced the web development world, static site might be a new word to you. Actually it's quite simple, it's just plan web-site with HTML files, CSS sheets and Javascript files. These file never changes unless you make them, thus the word ‘static'. The ‘dynamic' site, on the other hand, use database and complex post-end technology to ‘dynamically' generate these HTML / CSS /Javascripts files. It's much harder to develop and maintain. But I don't want that complexity you say. I just want to write something and post them and make them look neat. Then, my friend, look no further than a static site. Good news to us, there are a lot of static sites generators out there that can help us do the heavy-lifting of developing a website. The static sites generators come with many flavors, Jekyell(based on Ruby) , Pelican(based on Python are too popular one. Since I'm more familiar with Python. I decided to use Pelican to build my data science blog. The beautiful thing here is, since Pelican is written in Python, it's quite easy to make it work with Jupyter Notebook, which is a huge bonus for data science. This means you can write your blog posts using Jupyter Notebook, leverage all the powerful snippets, data visualization and code executing it has and roll all those into your post, with ease. Install Pelican Usually install Pelican will be easy, but if we also want to support Jupyter Notebook it will be harder. Many python modules will need to be installed using pip . Here is a list I used: Markdown == 2 .6.6 # Markdown support pelican == 3 .6.3 # Pelican itself jupyter> = 1 .0 # Jupyter Notebook ipython> = 4 .0 # iPython nbconvert> = 4 .0 # beautifulsoup4 # not sure why we need pharsing here, maybe manipulating codes ghp-import == 0 .4.1 #handle git branches matplotlib == 1 .5.1 #data visualization Once all are installed, run: pelican-quickstart Answer couple of questions and the backbone of your site is up. To make the Jupyter Notebook part work, we will need this Pelican plugin (yes, Pelican support plugins!): Pelican-ipynb . Once installed, activate the plugin in your pelicanconf.py . This is your dot file, and you'll be dealig with it a lot later on. Add these into the bottom: MARKUP = ( 'md' , 'ipynb' ) PLUGIN_PATH = './plugins' PLUGINS = [ 'ipynb.markup' ] Write Post Well this is the easier part. Just put your Jupyter Notebook file into the 'content' folder. Also, for each post, we'll need a meta file to include some meta data of the post. The meta file should have the extension: .ipynb-meta . Here is an example: Title : First Post Slug : first - post Date : 2016 - 06 - 08 20 : 00 Category : posts Tags : python firsts author : Vik Paruchuri Summary : My first post , read it to find out . It's quite easy to figure out what they are so I won't bother explain here. When done, save. Generating HTML Exit out of content folder, and run pelican content to generate the HTML . Enter output again and run: python -m pelican.server Then visit: localhost:8000 to see your new site. Putting it on GitHub Pages Create a GitHub Page is simple and there are many tutorials out there. Once created, edit your SITEURL in publishconf.py file, make it into https://username.github.io , substitute username with your site name. Run pelican content -s publishconf.py to generate the real stuff. Run ghp-import output -b master to import everything into the output folder to the master branch. Run git push origin master to push changes to GitHub repo. Themes There are a lot of themes to choose from. What you need to do is to configure your pelicanconf.py file and assign the theme name. Some themes may need to install extra Python modules or have access to other services to work. But overall the process is straight forward. Google Analytics Pelican have Google Analytics support out of the box. Register the site on GA , then get the UA-XXXXxxxxx id, put it into the pelicanconf.py file and you're golden. Disqus Disqus support come out of the box too. Register the site on Disqus, get your shortname correct, and put into pelicanconf.py and you should be good too. Some turorial suggest put into publishconf.py , well mine only works on pelicanconf.py so use your own judgement. SEO Basic SEO can be achieved using sitemap plugin. Search for it and put into pelicanconf.py , it will work automatically. Conclusion Overall the process is not hard at all. Once everything is set. Just focus on putting in solid content using Jupyter Notebook. Enjoy coding, visualizing and writing!","tags":"Tools","url":"Setup-Pelican-1.html"}]}